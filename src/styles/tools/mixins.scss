/* =========================================================================
   #MIXINS
   ========================================================================= */

// list-get MIMIC map-get
@function list-get($list, $key) {
   @each $item in $list{
    $item-key: nth($item, 1);
    $item-value: nth($item, 2);
    @if $item-key == $key {
       @return $item-value;
    }
  }
}

// MEDIA QUERY max-width
@mixin mq-lt($value) {
   @if type-of($value) == number{
    @media only screen and (max-width: $value - 1) {
       @content;
    }
  }
  @else {
     @media only screen and (max-width: list-get($breakpoint, $value) - 1){
      @content;
    }
  }
}

// MEDIA QUERY min-width
@mixin mq-gteq($value) {
   @if type-of($value) == number{
    @media only screen and (min-width: $value ) {
       @content;
    }
  }
  @else {
     @media only screen and (min-width: list-get($breakpoint, $value)){
      @content;
    }
  }
}


// MEDIA QUERY All-in-One
@mixin screen($range:null, $min:null, $max:null) {

  @if ($range){
    @media only screen and #{list-get($breakpoint-range, $range)}{
      @content;
    }
  }

  @else{
    $query: "only screen and all" !default;

    @if $min and $max {
      $query: "only screen and (min-width: #{$min}) and (max-width: #{$max})";
    }
    @else if $min {
      $query: "only screen and (min-width: #{$min})"; 
    }
    @else if $max {
      $query: "only screen and (max-width: #{$max})";  
    }
    @media #{$query} { 
      @content;
    }

  }

}




// VENDOR PREFIX
@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

// TRANSITION
@mixin transition($property: all, $duration: 400ms, $function: ease-in-out, $delay:0s) {
  $properties: $property $duration $function $delay;
  @include css3-prefix( 'transition', $properties);
}

// TRANSFORM
@mixin transform($params) {
   @include css3-prefix( 'transform', $params);
}

// ROTATE
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
   @include css3-prefix( 'transform', rotate($deg + deg));
  filter: progid:DXImageTransform.Microsoft.Matrix( M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod= 'auto expand');
  zoom: 1;
}

// FLEXBOX
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flexflow($values) {
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}
@mixin justify-content($value) {
  -webkit-justify-content: $value;
  justify-content: $value;
}
@mixin align-items($value) {
  -webkit-align-items: $value;
  align-items: $value;
}

// INPUT PLACEHOLDER
@mixin input-placeholder {
  &::-webkit-input-placeholder {
    @content
  }

  &:-moz-placeholder {
    @content
  }

  &::-moz-placeholder {
    @content
  }

  &:-ms-input-placeholder {
    @content
  }
}


@mixin has-nth($expression, $element: '*') {
  &:nth-last-child(#{$expression}):first-child,
  &:nth-last-child(#{$expression}):first-child ~ #{$element} {
    @content;
  }
}

@mixin at-least($quantity, $element: '*') {
  &:nth-last-child(n + #{$quantity}):first-child,
  &:nth-last-child(n + #{$quantity}):first-child ~ #{$element} {
   @content;
  }
}

@mixin at-most($quantity, $element: '*') {
  &:nth-last-child(-n + #{$quantity}):first-child,
   &:nth-last-child(-n + #{$quantity}):first-child ~ #{$element} {
     @content;
   }
}

//CLEARFIX
@mixin clearfix() {
  &:after {
    content: " ";
    display: block;
    clear: both;
  }
}


@mixin text-nowrap-ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
